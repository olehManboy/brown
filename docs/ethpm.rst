.. _ethpm:

====================================
The Ethereum Package Manager (ethPM)
====================================

`ethPM <https://www.ethpm.com/>`_ is a decentralized package manager used to distribute EVM smart contracts and projects. It has similar goals to most package managers found in any given programming language:

* Easily import and build upon core ideas written by others.
* Distribute the ideas that you've written and/or deployed, making them easily consumable for tooling and the community at large.

An ethPM package generally contains one or more of the following:

* **Contract sources**, which can be integrated within your own project
* **Deployment data** such as the address that a contract exists at on a network, it's external ABI, and the settings used when it was compiled


**TODO** ethPM + brownie, isn't it great

Registry URIs
=============

At its core, an ethPM package is a JSON object containing the ABI, source code, bytecode, deployment data and any other information that combines together to compose the smart contract idea. The `ethPM specification <http://ethpm.github.io/ethpm-spec/>`_ defines a schema to store all of this data in a structured JSON format, enabling quick and efficient transportation of smart contract ideas between tools and frameworks which support the specification.

**TODO** explain registry URIs and why this is so simple.

.. code-block::

    erc1319://[CONTRACT_ADDRESS]:[CHAIN_ID]/[PACKAGE_NAME]@[VERSION]/[PATH]

Accessing an ethPM Package
==========================

To intialize a new Brownie project from an ethPM package:

::

    $ brownie ethpm [uri]

This initializes a new project the following structure:

* each available source code is saved in the ``contracts/`` folder
* ABIs that do not have a corresponding source code are converted to `interfaces <https://solidity.readthedocs.io/en/latest/contracts.html#interfaces>`_ and saved in the ``contracts/interfaces/`` folder

Interacting with An Existing Project
====================================

You can load an entire package as a :ref:`Project <api-project-project>` object, which includes :ref:`Contract <api-network-contract>` instances for any deployed contracts on the active network:

.. code-block:: python

    >>> from brownie.project import from_ethpm
    >>> maker = from_ethpm("erc1319://erc20.snakecharmers.eth:1/dai-dai@1.0.0")
    >>> maker
    <TempProject object 'dai-dai'>
    >>> maker.dict()
    {
        'DSToken': [<DSToken Contract object '0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359'>]
    }

Or, create a :ref:`Contract <api-network-contract>` object to interact with a deployed instance of a specific contract within a package:

.. code-block:: python

    >>> from brownie import network, Contract
    >>> network.connect('mainnet')
    >>> ds = Contract("DSToken", manifest_uri="erc1319://erc20.snakecharmers.eth:1/dai-dai@1.0.0")
    >>> ds
    <DSToken Contract object '0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359'>

If the package does not include deployment information for the currently active network, a ``ContractNotFound`` exception is raised.

Integrating a Package into your Project
=======================================

** TODO **

Publishing an ethPM Package
===========================

Brownie allows you to generate an ethPM package from your project, and publish it to a registry. Packages that are generated by Brownie include:

* All contract source files within the project are included in `sources <https://ethpm.github.io/ethpm-spec/package-spec.html#sources-sources>`_
* The name, ABI, bytecode and compile settings for each contract in the project is included in `contract_types <https://ethpm.github.io/ethpm-spec/package-spec.html#contract-types-contract-types>`_
* Addresses of all deployed contracts across each network is included in `deployments <https://ethpm.github.io/ethpm-spec/package-spec.html#deployments-deployments>`_
* External packages that are imported via URI remappings are included in `build_dependencies <https://ethpm.github.io/ethpm-spec/package-spec.html#build-dependencies-build-dependencies>`_

**TODO**

    * warning about how you should measure twice, cut once, this stuff is immutable and all
    * explain how to choose a registry to publish to, how to promote your URI after you've published, mention the brownie registry and snakecharmer's registry directory
    * think about how to let the user preview their published package.. maybe a ropsten test-registry where content can be deleted / over-written?

To publish a Brownie project, first open the console from inside your project and connect to the mainnet (or whichever network your target registry is on). Then:

.. code-block:: python

    >>> project.MyProject.publish_package("erc20.snakecharmers.eth", "1.0.0", {'from': accounts[0]})
    "erc1319://erc20.snakecharmers.eth:1/myProject@1.0.0"

To accomplish the same with a regular python script:

.. code-block:: python

    from brownie import accounts, project, network
    from brownie.project.ethpm import publish_package

    network.connect('mainnet')
    my_project = project.load('/path/to/my_project')
    my_project.publish_package("erc20.snakecharmers.eth", "1.0.0", {'from': accounts[0]})
